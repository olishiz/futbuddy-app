{"version":3,"file":"src_app_pages_public_password-reset_password-reset_module_ts.js","mappings":";;;;;;;;;;;;;AAAA,iEAAe,k2CAAk2C,eAAe,0GAA0G;;;;;;;;;;;;;;;;;;;ACAj8C;AACc;AAEG;AAE1D,MAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,mEAAiB;KAC7B;CACF,CAAC;IAMW,8BAA8B,SAA9B,8BAA8B;CAAG;AAAjC,8BAA8B;IAJ1C,uDAAQ,CAAC;QACR,OAAO,EAAE,CAAC,kEAAqB,CAAC,MAAM,CAAC,CAAC;QACxC,OAAO,EAAE,CAAC,yDAAY,CAAC;KACxB,CAAC;GACW,8BAA8B,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;AChBF;AACM;AACmB;AAErB;AAEoC;AAEvB;IAY7C,uBAAuB,SAAvB,uBAAuB;CAAG;AAA1B,uBAAuB;IAVnC,uDAAQ,CAAC;QACN,OAAO,EAAE;YACL,yDAAY;YACZ,uDAAW;YACX,uDAAW;YACX,0FAA8B;YAC9B,+DAAmB;SACtB;QACH,YAAY,EAAE,CAAC,mEAAiB,CAAC;KAClC,CAAC;GACW,uBAAuB,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpBc;AACkB;AACF;AACf;AACkB;AAC5B;IAO5B,iBAAiB,SAAjB,iBAAiB;IAM1B,YAAoB,WAAwB,EACxB,iBAAoC,EACpC,WAAwB,EACxB,YAA0B,EAC1B,MAAc;QAJd,gBAAW,GAAX,WAAW,CAAa;QACxB,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,gBAAW,GAAX,WAAW,CAAa;QACxB,iBAAY,GAAZ,YAAY,CAAc;QAC1B,WAAM,GAAN,MAAM,CAAQ;QARlC,iBAAY,GAAW,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;QAU5C,aAAa;QACb,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;YACrC,KAAK,EAAE,CAAC,EAAE,EAAE,8DAAkB,CAAC,CAAC,4DAAgB,EAAE,+DAAmB,CAAC,CAAC,CAAC;SAC3E,CAAC,CAAC;IACP,CAAC;IAED,QAAQ;IACR,CAAC;IAEK,KAAK;;;YAEP,oBAAoB;YACpB,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,IAAI,EAAE,EAAE;gBACnC,MAAM,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,OAAO,EAAE,oBAAoB,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;aAE9F;iBAAM;gBAEH,2BAA2B;gBAC3B,MAAM,IAAI,CAAC,WAAW,CAAC,qBAAqB,CAAC,UAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,CAAC,0CAAE,KAAK,CAAC,CAAC;gBAElF,gDAAgD;gBAChD,UAAU,CAAC,GAAG,EAAE;oBACZ,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,SAAS,EAAE,EAAC,UAAU,EAAE,IAAI,EAAC,CAAC,CAAC;gBAC7D,CAAC,EAAE,IAAI,CAAC,CAAC;aAEZ;;KAEJ;CAEJ;;YAnDQ,oEAAW;YACX,6DAAiB;YAFjB,uDAAW;YAGX,uEAAY;YACZ,mDAAM;;AAOF,iBAAiB;IAL7B,wDAAS,CAAC;QACP,QAAQ,EAAE,oBAAoB;QAC9B,iOAAyC;;KAE5C,CAAC;GACW,iBAAiB,CAyC7B;AAzC6B","sources":["./src/app/pages/public/password-reset/password-reset.page.html","./src/app/pages/public/password-reset/password-reset-routing.module.ts","./src/app/pages/public/password-reset/password-reset.module.ts","./src/app/pages/public/password-reset/password-reset.page.ts"],"sourcesContent":["export default \"<ion-header>\\r\\n    <ion-toolbar class=\\\"ion-no-border\\\">\\r\\n        <ion-buttons slot=\\\"start\\\">\\r\\n            <ion-back-button text=\\\"Sign in\\\" defaultHref=\\\"/signin\\\"></ion-back-button>\\r\\n        </ion-buttons>\\r\\n    </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content>\\r\\n\\r\\n    <div class=\\\"ion-padding ion-full-height ion-flex ion-flex-center\\\">\\r\\n\\r\\n        <div class=\\\"logo-container\\\">\\r\\n            <h1 class=\\\"logo-placeholder\\\">FutBuddy</h1>\\r\\n            <p>Reset your password</p>\\r\\n        </div>\\r\\n\\r\\n        <form class=\\\"form-default\\\" [formGroup]=\\\"reset_form\\\" (submit)=\\\"reset()\\\">\\r\\n\\r\\n            <ion-list class=\\\"item-card-list\\\" lines=\\\"none\\\">\\r\\n\\r\\n                <ion-item>\\r\\n                    <ion-label color=\\\"tertiary\\\" position=\\\"stacked\\\">Email</ion-label>\\r\\n                    <ion-input formControlName=\\\"email\\\" type=\\\"email\\\" autocomplete=\\\"off\\\"\\r\\n                               placeholder=\\\"Your email address\\\"></ion-input>\\r\\n                </ion-item>\\r\\n            </ion-list>\\r\\n\\r\\n            <ion-button class=\\\"ion-margin-top\\\" expand=\\\"block\\\" color=\\\"primary\\\" type=\\\"submit\\\">\\r\\n                Reset password\\r\\n            </ion-button>\\r\\n        </form>\\r\\n\\r\\n        <div class=\\\"ion-text-center ion-margin-top\\\">\\r\\n            <ion-text color=\\\"medium\\\">\\r\\n                <small>&copy; {{current_year}} FutBuddy</small>\\r\\n            </ion-text>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n\\r\\n</ion-content>\\r\\n\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { PasswordResetPage } from './password-reset.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: PasswordResetPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class PasswordResetPageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { PasswordResetPageRoutingModule } from './password-reset-routing.module';\r\n\r\nimport { PasswordResetPage } from './password-reset.page';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        IonicModule,\r\n        PasswordResetPageRoutingModule,\r\n        ReactiveFormsModule\r\n    ],\r\n  declarations: [PasswordResetPage]\r\n})\r\nexport class PasswordResetPageModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from \"@angular/forms\";\r\nimport { AuthService } from \"../../../services/auth/auth.service\";\r\nimport { LoadingController } from \"@ionic/angular\";\r\nimport { ToastService } from \"../../../services/toast/toast.service\";\r\nimport { Router } from \"@angular/router\";\r\n\r\n@Component({\r\n    selector: 'app-password-reset',\r\n    templateUrl: './password-reset.page.html',\r\n    styleUrls: ['./password-reset.page.scss'],\r\n})\r\nexport class PasswordResetPage implements OnInit {\r\n\r\n    current_year: number = new Date().getFullYear();\r\n\r\n    reset_form: FormGroup;\r\n\r\n    constructor(private authService: AuthService,\r\n                private loadingController: LoadingController,\r\n                private formBuilder: FormBuilder,\r\n                private toastService: ToastService,\r\n                private router: Router) {\r\n\r\n        // Setup form\r\n        this.reset_form = this.formBuilder.group({\r\n            email: ['', Validators.compose([Validators.email, Validators.required])],\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    async reset() {\r\n\r\n        // If password empty\r\n        if (this.reset_form.value.email == '') {\r\n            await this.toastService.presentToast('Error', 'Please input email', 'top', 'danger', 2000);\r\n\r\n        } else {\r\n\r\n            // Reset password via email\r\n            await this.authService.resetPasswordViaEmail(this.reset_form.get('email')?.value);\r\n\r\n            // Make timeout to navigate back to sign in page\r\n            setTimeout(() => {\r\n                this.router.navigateByUrl('/signin', {replaceUrl: true});\r\n            }, 2000);\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n"],"names":[],"sourceRoot":"webpack:///"}